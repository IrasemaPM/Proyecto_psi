install.packages("knitr")
install.packages("tidyverse")
install.packages("quarto")
install.packages("rmarkdown")
setwd("C:/Users/irase/OneDrive/Escritorio/Figura_3")
install.packages("orca")
#Para limpiar la memoria
#[SE USA EN EL ARTICULOOO]
rm(list = ls())
library(deSolve)
library(ggplot2)
library(orca)
library(plotly)
library(rmarkdown)
mu<-1/(70*365)
library(ggplot2)
library(orca)
library(plotly)
library(rmarkdown)
mu<-1/(70*365)
omega<- 0.02
vgamma<- 1/14
p<-0.7
vsigma<-.75
p_e<-p*vsigma
vT<-35
phi_plus<- (-log(1-p_e))/vT #
phi_minus<- (1/vT)*log((1-p_e)/(1-p))
phi<-phi_plus+phi_minus
psi<-1
c<-(1-vsigma)*psi
xi<-1/(30)
vbeta<-0.95*(((mu+vgamma)*((mu*(mu+phi+omega))+(omega*phi_minus)))/((mu+omega)*(mu+(c*phi_minus))))
n=100000
m<-1
vbeta<-seq(0.1,.9, length.out=n)#1*(((mu+vgamma)*((mu*(mu+phi+omega))+(omega*phi_minus)))/((mu+omega)*(mu+(c*phi_minus))))
vbeta
xvalores<-seq(0.7,.9, length.out=m)
IR01<-matrix(nrow = n,ncol = m)
IR02<-matrix(nrow = n,ncol = m)
MR0<-matrix(nrow = n,ncol = m)
for (k in 1:m) {
vsigma<-xvalores[k]
p_e<-p*vsigma
vT<-35
phi_plus<- (-log(1-p_e))/vT #
phi_minus<- (1/vT)*log((1-p_e)/(1-p))
phi<-phi_plus+phi_minus
c<-(1-vsigma)*psi
IR0<-matrix(nrow = n,ncol = 2)
vI<-matrix(nrow = n,ncol = 2)
vR0<-c()
vradical<-c()
for (i in 1:n) {
a1<-(vbeta[i]*(mu+omega)*(mu+(c*phi_minus)))
a2<-(mu+vgamma)*((mu*(mu+phi+omega))+(omega*phi_minus))
R0<-a1/a2
vR0[i]<-R0
D1<-(mu+c*phi_minus)*(mu+omega)*(1+mu+xi+vgamma)
D2<-((mu+omega+phi_plus)*(mu+vgamma)*(mu+xi)*c)-((mu+omega)*(mu+xi)*c*vbeta[i])
D<-vbeta[i]*(D1+D2)
DT<-(1/((mu+vgamma)*((mu*(mu+phi+omega))+(omega*phi_minus)))
)*D
A<-(mu+omega)*(mu+xi+vgamma)*c*(vbeta[i]^2)
AR0<-(((mu+xi+vgamma)*c*(vbeta[i]))*((mu+vgamma)*((mu*(mu+phi+omega))+(omega*phi_minus))))/ ((mu+(c*phi_minus)))
B<- -vbeta[i]*(mu+omega)*(mu+xi+vgamma)*(mu+(c*phi_minus))-
(mu+vgamma)*(mu+omega)*(mu+xi)*(c*vbeta[i])-(mu+vgamma)*(phi_plus)*(mu+xi)*(c*vbeta[i])+
(mu+omega)*(mu+xi)*(c*(vbeta[i]^2))
BD<-(R0-DT)*(mu+vgamma)*((mu*(mu+phi+omega))+(omega*phi_minus))
vC<-((R0-1))*(mu+vgamma)*((mu*(mu+phi+omega))+(omega*phi_minus))*(mu+xi)
vradical[i]<-BD^2+(4*AR0*vC)
if(BD^2+(4*AR0*vC)>=0){
IR0[i,1]<- (BD+ sqrt(BD^2 + (4*AR0*vC)))/(2*AR0)
IR0[i,2]<-(BD- sqrt(BD^2 + (4*AR0*vC)))/(2*AR0)
}
}
radicalR0<-vR0
#ubicar los Na
verror1<-which(is.na(IR0[,1]))
verror2<-which(is.na(IR0[,2]))
#Lo siguiente permite graficar solo las raices reales
if(length(verror1)==0 ){
IR0<-IR0
vR0<-vR0
}else{
IR0<-IR0[-verror1,]
vR0<-vR0[-verror1]
}
IR01[1:length(IR0[,1]),k]<-IR0[,1]
IR02[1:length(IR0[,1]),k]<-IR0[,2]
MR0[1:length(vR0),k]<-vR0
}
#IR0<-na.omit(IR0)
IR01
v0<-rep(0,n)
length(v0)
v1<-seq(0,1,length.out=length(v0))
plot(v1,v0,xlim = c(0,2), ylim = c(min(0,min(IR0[,2])),0.19), type = 'l', xlab = expression(R[0]),
ylab = "I*",lwd=3,cex.axis = 1.3,cex.lab = 1.5)
for (i in 1:m) {
lines(MR0[,i],IR02[,i],col="red",lwd=3,lty = 2)
lines(MR0[,i],IR01[,i],lwd=3)
}
x0<-seq(1,2.5,length.out=n)
data_bifucation<-data.frame(v0,v1,MR0,IR01,IR02)
fig<-plot_ly(x=~v1,y=v0,mode= "lines", type="scatter",line=list(color="skyblue",width = 3),showlegend=FALSE)
fig<<-fig %>% add_trace(x=MR0[,1],y=IR02[,1],mode= "lines",name="", type="scatter",line=list(color="red",dash = 'dash',width = 3),showlegend=FALSE)#esto permite poner como si fuera un for
fig<<-fig %>% add_trace(x=MR0[,1],y=IR01[,1],mode= "lines",name="", type="scatter",line=list(color="skyblue",width = 3),showlegend=FALSE)#esto permite poner como si fuera un for
fig<<-fig %>% add_trace(x=x0,y=v0,mode= "lines",name="", type="scatter",line=list(color="red",dash = 'dash',width = 3),showlegend=FALSE)#esto permite poner como si fuera un for
fig<-fig %>% layout(yaxis=list(title="I", showgrid = FALSE, range=c(-0.031,.25)),xaxis=list(title="R<sub>0</sub>", showgrid = FALSE,range = c(0, 2)),font=list(size=20),
showlegend=FALSE,legend = list(orientation = "h",
x = .5,  # Posici√≥n horizontal (0 a 1)
xanchor = "center",
y = 1.21))#cambiar los ejes del plano
fig<-fig %>% layout(autosize = F, width = 450, height = 450)
fig
